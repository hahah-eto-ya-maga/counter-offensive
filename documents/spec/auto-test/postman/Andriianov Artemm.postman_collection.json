{
	"info": {
		"_postman_id": "1425a4d8-e4a4-465f-8df7-bbd4c7dba824",
		"name": "Andriianov Artemm",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30955074"
	},
	"item": [
		{
			"name": "tests",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "successEnterance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok'); \r",
											"}); \r",
											" \r",
											"pm.test('check response login is correct', ()=>{ \r",
											"    pm.expect(response.data.login).to.eql(pm.variables.get(\"login\")); \r",
											"}); \r",
											" \r",
											"pm.test('check response nickname is correct', ()=>{ \r",
											"    pm.expect(response.data.nickname).to.eql('testuser'); \r",
											"}); \r",
											" \r",
											"pm.test('check response rank_name is correct', ()=>{ \r",
											"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
											"}); \r",
											" pm.test('check response gamer_exp is correct', ()=>{ \r",
											"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
											"}); \r",
											" \r",
											"pm.test('check response next_rang is correct', ()=>{ \r",
											"    pm.expect(response.data.next_rang).to.eql(144); \r",
											"}); \r",
											" \r",
											"pm.test('check response level is correct', ()=>{ \r",
											"    pm.expect(response.data.level).to.eql(1); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=login&hash={{hash}}&rnd={{rnd}}&login={{login}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										},
										{
											"key": "nickname",
											"value": "",
											"disabled": true
										},
										{
											"key": "token",
											"value": "",
											"disabled": true
										},
										{
											"key": "login",
											"value": "{{login}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyLogin(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=login&hash={{hash}}&rnd={{rnd}}&login=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										},
										{
											"key": "login",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyHash(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=login&hash=&rnd={{rnd}}&login={{login}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "hash",
											"value": ""
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										},
										{
											"key": "login",
											"value": "{{login}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongHash(Error403)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 403', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(403);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Forbidden\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Forbidden\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=login&hash={{hash}}1$$$%%%&rnd={{rnd}}&login={{login}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "hash",
											"value": "{{hash}}1$$$%%%"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										},
										{
											"key": "login",
											"value": "{{login}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongLogin(Error461)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 461', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(461);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"User not Exist\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"User not Exist\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=login&hash={{hash}}&rnd={{rnd}}&login={{login}}1234$$%23",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										},
										{
											"key": "login",
											"value": "{{login}}1234$$%23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Method Not Allowed\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Method Not Allowed\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=&hash={{hash}}&rnd={{rnd}}&login={{login}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										},
										{
											"key": "login",
											"value": "{{login}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=login1&hash={{hash}}&rnd={{rnd}}&login={{login}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "login1"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										},
										{
											"key": "rnd",
											"value": "{{rnd}}"
										},
										{
											"key": "login",
											"value": "{{login}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "registration",
					"item": [
						{
							"name": "loginTest",
							"item": [
								{
									"name": "emptyLogin(Error400)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 400', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login=&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": ""
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "specSymbol(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 400', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(413);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get(\"Invalid login(nickname)\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid login(nickname)\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}$%23&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}$#"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "space(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 400', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(413);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get(\"Invalid login(nickname)\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid login(nickname)\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}} 13&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}} 13"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "5LettersLengthLogin(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 413', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(413);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get(\"Invalid login(nickname)\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid login(nickname)\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login=testi&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "testi"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "6LettersLengthLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check response login is correct', ()=>{ \r",
													"    pm.expect(response.data.login).to.eql('tester'); \r",
													"}); \r",
													" \r",
													"pm.test('check response nickname is correct', ()=>{ \r",
													"    pm.expect(response.data.nickname).to.eql(pm.variables.get('nickReg')); \r",
													"}); \r",
													" \r",
													"pm.test('check response rank_name is correct', ()=>{ \r",
													"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
													"}); \r",
													" \r",
													"pm.test('check response gamer_exp is correct', ()=>{ \r",
													"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
													"}); \r",
													" \r",
													"pm.test('check response next_rang is correct', ()=>{ \r",
													"    pm.expect(response.data.next_rang).to.eql(144); \r",
													"}); \r",
													" \r",
													"pm.test('check response level is correct', ()=>{ \r",
													"    pm.expect(response.data.level).to.eql(1); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login=tester&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "tester"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "7LettersLengthLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check response login is correct', ()=>{ \r",
													"    pm.expect(response.data.login).to.eql('testera'); \r",
													"}); \r",
													" \r",
													"pm.test('check response nickname is correct', ()=>{ \r",
													"    pm.expect(response.data.nickname).to.eql(pm.variables.get('nickReg')); \r",
													"}); \r",
													" \r",
													"pm.test('check response rank_name is correct', ()=>{ \r",
													"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
													"}); \r",
													" \r",
													"pm.test('check response gamer_exp is correct', ()=>{ \r",
													"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
													"}); \r",
													" \r",
													"pm.test('check response next_rang is correct', ()=>{ \r",
													"    pm.expect(response.data.next_rang).to.eql(144); \r",
													"}); \r",
													" \r",
													"pm.test('check response level is correct', ()=>{ \r",
													"    pm.expect(response.data.level).to.eql(1); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login=testera&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "testera"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "14LettersLengthLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check response login is correct', ()=>{ \r",
													"    pm.expect(response.data.login).to.eql(pm.variables.get('loginReg')+'111'); \r",
													"}); \r",
													" \r",
													"pm.test('check response nickname is correct', ()=>{ \r",
													"    pm.expect(response.data.nickname).to.eql(pm.variables.get('nickReg')); \r",
													"}); \r",
													" \r",
													"pm.test('check response rank_name is correct', ()=>{ \r",
													"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
													"}); \r",
													" \r",
													"pm.test('check response gamer_exp is correct', ()=>{ \r",
													"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
													"}); \r",
													" \r",
													"pm.test('check response next_rang is correct', ()=>{ \r",
													"    pm.expect(response.data.next_rang).to.eql(144); \r",
													"}); \r",
													" \r",
													"pm.test('check response level is correct', ()=>{ \r",
													"    pm.expect(response.data.level).to.eql(1); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}111&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}111"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "15LettersLengthLogin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check response login is correct', ()=>{ \r",
													"    pm.expect(response.data.login).to.eql(pm.variables.get('loginReg')+'1111'); \r",
													"}); \r",
													" \r",
													"pm.test('check response nickname is correct', ()=>{ \r",
													"    pm.expect(response.data.nickname).to.eql(pm.variables.get('nickReg')); \r",
													"}); \r",
													" \r",
													"pm.test('check response rank_name is correct', ()=>{ \r",
													"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
													"}); \r",
													" \r",
													"pm.test('check response gamer_exp is correct', ()=>{ \r",
													"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
													"}); \r",
													" \r",
													"pm.test('check response next_rang is correct', ()=>{ \r",
													"    pm.expect(response.data.next_rang).to.eql(144); \r",
													"}); \r",
													" \r",
													"pm.test('check response level is correct', ()=>{ \r",
													"    pm.expect(response.data.level).to.eql(1); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}1111&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}1111"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "16LettersLengthLogin(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 413', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(413);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get(\"Invalid login(nickname)\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid login(nickname)\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}11111&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}11111"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "loginOccupied(Error460)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 460', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(460);\r",
													"});\r",
													"\r",
													"pm.test('check code text is ' + pm.variables.get(\"Login Occupied\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Login Occupied\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{login}}&nickname={{nickReg}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{login}}"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "nicknameTest",
							"item": [
								{
									"name": "emptyNickname(Error400)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 400', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}65&nickname=",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}65"
												},
												{
													"key": "nickname",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "specSymbol(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 413', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(413);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get(\"Invalid login(nickname)\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid login(nickname)\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}97&nickname={{nickReg}}$%",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}97"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}$%"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "space(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 400', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(413);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get(\"Invalid login(nickname)\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid login(nickname)\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}09&nickname={{nickReg}} 1",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}09"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}} 1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "2LettersLengthNickname(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 413', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(413);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get(\"Invalid login(nickname)\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid login(nickname)\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{login}}34&nickname=te",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{login}}34"
												},
												{
													"key": "nickname",
													"value": "te"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3LettersLengthNickname(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check response login is correct', ()=>{ \r",
													"    pm.expect(response.data.login).to.eql(pm.variables.get(\"loginReg\")+'3'); \r",
													"}); \r",
													" \r",
													"pm.test('check response nickname is correct', ()=>{ \r",
													"    pm.expect(response.data.nickname).to.eql('hey'); \r",
													"}); \r",
													" \r",
													"pm.test('check response rank_name is correct', ()=>{ \r",
													"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
													"}); \r",
													" \r",
													"pm.test('check response gamer_exp is correct', ()=>{ \r",
													"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
													"}); \r",
													" \r",
													"pm.test('check response next_rang is correct', ()=>{ \r",
													"    pm.expect(response.data.next_rang).to.eql(144); \r",
													"}); \r",
													" \r",
													"pm.test('check response level is correct', ()=>{ \r",
													"    pm.expect(response.data.level).to.eql(1); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}3&nickname=hey",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}3"
												},
												{
													"key": "nickname",
													"value": "hey"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4LettersLengthNickname(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check response login is correct', ()=>{ \r",
													"    pm.expect(response.data.login).to.eql(pm.variables.get(\"loginReg\")+'4'); \r",
													"}); \r",
													" \r",
													"pm.test('check response nickname is correct', ()=>{ \r",
													"    pm.expect(response.data.nickname).to.eql('1111'); \r",
													"}); \r",
													" \r",
													"pm.test('check response rank_name is correct', ()=>{ \r",
													"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
													"}); \r",
													" \r",
													"pm.test('check response gamer_exp is correct', ()=>{ \r",
													"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
													"}); \r",
													" \r",
													"pm.test('check response next_rang is correct', ()=>{ \r",
													"    pm.expect(response.data.next_rang).to.eql(144); \r",
													"}); \r",
													" \r",
													"pm.test('check response level is correct', ()=>{ \r",
													"    pm.expect(response.data.level).to.eql(1); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}4&nickname=1111",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}4"
												},
												{
													"key": "nickname",
													"value": "1111"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "15LettersLengthNickname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check response login is correct', ()=>{ \r",
													"    pm.expect(response.data.login).to.eql(pm.variables.get(\"loginReg\")+'156'); \r",
													"}); \r",
													" \r",
													"pm.test('check response nickname is correct', ()=>{ \r",
													"    pm.expect(response.data.nickname).to.eql(pm.variables.get('nickReg')+'1111'); \r",
													"}); \r",
													" \r",
													"pm.test('check response rank_name is correct', ()=>{ \r",
													"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
													"}); \r",
													" \r",
													"pm.test('check response gamer_exp is correct', ()=>{ \r",
													"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
													"}); \r",
													" \r",
													"pm.test('check response next_rang is correct', ()=>{ \r",
													"    pm.expect(response.data.next_rang).to.eql(144); \r",
													"}); \r",
													" \r",
													"pm.test('check response level is correct', ()=>{ \r",
													"    pm.expect(response.data.level).to.eql(1); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}156&nickname={{nickReg}}1111",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}156"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}1111"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "16LettersLengthNickname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check response login is correct', ()=>{ \r",
													"    pm.expect(response.data.login).to.eql(pm.variables.get(\"loginReg\")+'16'); \r",
													"}); \r",
													" \r",
													"pm.test('check response nickname is correct', ()=>{ \r",
													"    pm.expect(response.data.nickname).to.eql(pm.variables.get('nickReg')+'11111'); \r",
													"}); \r",
													" \r",
													"pm.test('check response rank_name is correct', ()=>{ \r",
													"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
													"}); \r",
													" \r",
													"pm.test('check response gamer_exp is correct', ()=>{ \r",
													"    pm.expect(response.data.gamer_exp).to.eql(0); \r",
													"}); \r",
													" \r",
													"pm.test('check response next_rang is correct', ()=>{ \r",
													"    pm.expect(response.data.next_rang).to.eql(144); \r",
													"}); \r",
													" \r",
													"pm.test('check response level is correct', ()=>{ \r",
													"    pm.expect(response.data.level).to.eql(1); \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}16&nickname={{nickReg}}11111",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}16"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}11111"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "17LettersLengthNickname(Error413)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 413', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(413);\r",
													"});\r",
													"\r",
													"pm.test('check code text is ' + pm.variables.get(\"Invalid login(nickname)\"), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid login(nickname)\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}764&nickname={{nickReg}}111111",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}764"
												},
												{
													"key": "nickname",
													"value": "{{nickReg}}111111"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "russianLetters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check registration status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check response login is correct', ()=>{ \r",
													"    pm.expect(response.data.login).to.eql('testuserreg'); \r",
													"}); \r",
													" \r",
													"pm.test('check response nickname is correct', ()=>{ \r",
													"    pm.expect(response.data.nickname).to.eql('testuserreg'); \r",
													"}); \r",
													" \r",
													"pm.test('check response rank_name is correct', ()=>{ \r",
													"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
													"}); \r",
													" \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}aa&nickname=ффффффффффффф",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "hash",
													"value": "{{hashReg}}"
												},
												{
													"key": "method",
													"value": "registration"
												},
												{
													"key": "login",
													"value": "{{loginReg}}aa"
												},
												{
													"key": "nickname",
													"value": "ффффффффффффф"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "successEntrance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check registration status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok'); \r",
											"}); \r",
											" \r",
											"pm.test('check response login is correct', ()=>{ \r",
											"    pm.expect(response.data.login).to.eql('testuserreg'); \r",
											"}); \r",
											" \r",
											"pm.test('check response nickname is correct', ()=>{ \r",
											"    pm.expect(response.data.nickname).to.eql('testuserreg'); \r",
											"}); \r",
											" \r",
											"pm.test('check response rank_name is correct', ()=>{ \r",
											"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
											"}); \r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login={{loginReg}}&nickname={{nickReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "hash",
											"value": "{{hashReg}}"
										},
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "bigLetters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check registration status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok'); \r",
											"}); \r",
											" \r",
											"pm.test('check response login is correct', ()=>{ \r",
											"    pm.expect(response.data.login).to.eql('testuserreg'); \r",
											"}); \r",
											" \r",
											"pm.test('check response nickname is correct', ()=>{ \r",
											"    pm.expect(response.data.nickname).to.eql('testuserreg'); \r",
											"}); \r",
											" \r",
											"pm.test('check response rank_name is correct', ()=>{ \r",
											"    pm.expect(response.data.rank_name).to.eql('Private'); \r",
											"}); \r",
											" \r",
											"pm.test('check response gamer_exp is correct', ()=>{ \r",
											"    pm.expect(response.data.gamer_exp).to.eql(1); \r",
											"}); \r",
											" \r",
											"pm.test('check response next_rang is correct', ()=>{ \r",
											"    pm.expect(response.data.next_rang).to.eql(143); \r",
											"}); \r",
											" \r",
											"pm.test('check response level is correct', ()=>{ \r",
											"    pm.expect(response.data.level).to.eql(1); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=registration&login=TEstingUse&hash=${pm.variables.get(\"hash1\")}&nickname=${pm.variables.get(\"nickname\")}`,\r",
											"    method:`GET`,\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration&login=testinguse&nickname={{nickReg}}&=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "hash",
											"value": "{{hashReg}}"
										},
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "testinguse"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										},
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyHash(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check registration status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?hash=&method=registration&login={{loginReg}}&nickname={{nickReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "hash",
											"value": ""
										},
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongHash(Error?)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check registration status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is Bad Request', ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?hash=&method=registration&login={{loginReg}}&nickname={{nickReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "hash",
											"value": ""
										},
										{
											"key": "method",
											"value": "registration"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check registration status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is ' +pm.variables.get(\"Method Not Allowed\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Method Not Allowed\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?hash={{hashReg}}&method=&login={{loginReg}}&nickname={{nickReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "hash",
											"value": "{{hashReg}}"
										},
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?hash={{hashReg}}&method=registration1&login={{loginReg}}&nickname={{nickReg}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "hash",
											"value": "{{hashReg}}"
										},
										{
											"key": "method",
											"value": "registration1"
										},
										{
											"key": "login",
											"value": "{{loginReg}}"
										},
										{
											"key": "nickname",
											"value": "{{nickReg}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "logout",
					"item": [
						{
							"name": "success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											"\r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is Data', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=logout&token={{token}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "logout"
										},
										{
											"key": "token",
											"value": "{{token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyToken(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get('Bad Request'), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get('Bad Request'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=logout&token=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "logout"
										},
										{
											"key": "token",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongTokenError401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 401', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get('Unauthorized'), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get('Unauthorized'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=logout&token={{token}}$$$%23%23%23",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "logout"
										},
										{
											"key": "token",
											"value": "{{token}}$$$%23%23%23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get('Method Not Allowed'), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get('Method Not Allowed'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=&token=f2eecbf23daf30eeec7e5989a111e3b424aa3c33afe71bc82381518d6869b31c",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "token",
											"value": "f2eecbf23daf30eeec7e5989a111e3b424aa3c33afe71bc82381518d6869b31c"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=logout1&token=f2eecbf23daf30eeec7e5989a111e3b424aa3c33afe71bc82381518d6869b31c",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "logout1"
										},
										{
											"key": "token",
											"value": "f2eecbf23daf30eeec7e5989a111e3b424aa3c33afe71bc82381518d6869b31c"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "tokenVerification",
					"item": [
						{
							"name": "success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is Data', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=tokenVerification&token={{token}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "tokenVerification"
										},
										{
											"key": "token",
											"value": "{{token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noToken(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check tokenVerification status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=tokenVerification&token=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "tokenVerification"
										},
										{
											"key": "token",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongToken(Error401)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check tokenVerification status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 401', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Unauthorized\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=tokenVerification&token={{token}}123!%23%23%23$$$",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "tokenVerification"
										},
										{
											"key": "token",
											"value": "{{token}}123!%23%23%23$$$"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check tokenVerification status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Method Not Allowed\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Method Not Allowed\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=&token={{token}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "token",
											"value": "{{token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=tokenVerification1&token={{token}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "tokenVerification1"
										},
										{
											"key": "token",
											"value": "{{token}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "updatePassword",
					"item": [
						{
							"name": "success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is Data', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=updatePassword&token=${pm.variables.get(\"token\")}&hash=${pm.variables.get(\"hash1\")}`,\r",
											"    method:`GET`,\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=updatePassword&token={{token}}&hash=f836c534387323b096f080676dfe75f8d486bb02aa76393f8fa12b6191b5434e",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "updatePassword"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "f836c534387323b096f080676dfe75f8d486bb02aa76393f8fa12b6191b5434e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyToken(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check updatePassword status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=updatePassword&token=&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "updatePassword"
										},
										{
											"key": "token",
											"value": ""
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyHash(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check updatePassword status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=updatePassword&token={{token}}&hash=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "updatePassword"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongToken(Error401)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check updatePassword status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 401', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Unauthorized\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=updatePassword&token={{token}}%23%23%23$$$&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "updatePassword"
										},
										{
											"key": "token",
											"value": "{{token}}%23%23%23$$$"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check updatePassword status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Method Not Allowed\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Method Not Allowed\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=updatePassword1&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "updatePassword1"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "sendMessage",
					"item": [
						{
							"name": "success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is Data', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}&message={{message}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "{{message}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "spaceInBeginAndEnd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is Data', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}&message=    {{message}}   ",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "    {{message}}   "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyToken(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check sendMessage status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token=&message={{message}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": ""
										},
										{
											"key": "message",
											"value": "{{message}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "emptyMessage(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check sendMessage status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}&message=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongToken(Error401)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check sendMessage status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 401', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Unauthorized\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}123432$$$%23&message={{message}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}123432$$$%23"
										},
										{
											"key": "message",
											"value": "{{message}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "tooLongMessage(Error432)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check sendMessage status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 432', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(432);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Invalid Message\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid Message\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}&message=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "specSymbolMessage(Error432)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check sendMessage status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 432', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(432);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Invalid Message\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid Message\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}&message=$$$",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "$$$"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "specSymbolMessage(Error432)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check sendMessage status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 432', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(432);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Invalid Message\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid Message\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}&message=@@@@@",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "@@@@@"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "specSymbolMessage(Error432)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check sendMessage status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 432', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(432);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Invalid Message\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid Message\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}&message=((((",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "(((("
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "specSymbolMessage(Error432)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check sendMessage status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 432', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(432);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Invalid Message\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid Message\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}&message=)))",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": ")))"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "specSymbolMessage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is Data', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage&token={{token}}&message=.,!?\"'-",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": ".,!?\"'-"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check sendMessage status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Method Not Allowed\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Method Not Allowed\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=&token={{token}}&message={{message}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "{{message}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=sendMessage111&token={{token}}&message={{message}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "sendMessage111"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "message",
											"value": "{{message}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "getMessages",
					"item": [
						{
							"name": "newMessages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok'); \r",
											"}); \r",
											"for(i=0;i<30;i++){\r",
											"    pm.test('check right response message '+i, ()=>{ \r",
											"    pm.expect(response.data.messages[i].text).to.eql(pm.variables.get(\"message\")); \r",
											"}); \r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    \r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"    //Тридцать первых сообщений\r",
											"    for(i=0;i<30;i++){\r",
											"        \r",
											"        pm.sendRequest({\r",
											"            url: `http://${pm.variables.get(\"url\")}/api/?method=sendMessage&message=1&token=${pm.variables.get(\"token\")}`,\r",
											"         method:`GET`,\r",
											"        });\r",
											"    }\r",
											"    //Тридцать вторых сообщений\r",
											"    for(i=0;i<30;i++){\r",
											"        pm.sendRequest({\r",
											"            url: `http://${pm.variables.get(\"url\")}/api/?method=sendMessage&message=${pm.variables.get(\"message\")}&token=${pm.variables.get(\"token\")}`,\r",
											"         method:`GET`,\r",
											"        });\r",
											"    }\r",
											"}\r",
											");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getMessages&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noToken(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getMessages&token=&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages"
										},
										{
											"key": "token",
											"value": ""
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noHash(Error400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getMessages&token={{token}}&hash=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongToken(Error401)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 401', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Unauthorized\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getMessages&token={{token}}123%23%23%23$$$&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages"
										},
										{
											"key": "token",
											"value": "{{token}}123%23%23%23$$$"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Method Not Allowed\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Method Not Allowed\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getMessages11&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getMessages11"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "getLobby",
					"item": [
						{
							"name": "oldHash",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"    pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=getLobby&token=${pm.variables.get(\"token\")}&hash=${pm.variables.get(\"hash\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  hashLobby = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"hashLobby\", hashLobby.lobbyHash)\r",
											"}\r",
											");\r",
											"}\r",
											");\r",
											"//\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is Data', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash={{hashLobby}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hashLobby}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "newLobbyHash",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is not true', ()=>{ \r",
											"    pm.expect(response.data).to.not.eql(true);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "occupiedGeneral",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"    pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&role=${pm.variables.get(\"general\")}&token=${pm.variables.get(\"token\")}`,\r",
											"    method:`GET`,\r",
											"})\r",
											"}\r",
											");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is not true', ()=>{ \r",
											"    pm.expect(response.data).to.not.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response general is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.general).to.eql(false);\r",
											"}); \r",
											"\r",
											"pm.test('check response bannerman is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.bannerman).to.eql(true);\r",
											"}); \r",
											"console.log(response.data.lobby.tanks.heavyTank)\r",
											"\r",
											"pm.test('check response bannerman is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank).to.eql([]);\r",
											"}); \r",
											"\r",
											"pm.test('check response bannerman is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank).to.eql([]);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "occupiedBannerman",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testpuppy1\")}&hash=${pm.variables.get(\"hashpuppy1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"    pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&role=${pm.variables.get(\"bannerman\")}&token=${pm.variables.get(\"token\")}`,\r",
											"    method:`GET`,\r",
											"})\r",
											"}\r",
											");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is not true', ()=>{ \r",
											"    pm.expect(response.data).to.not.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response general is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.general).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response bannerman is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.bannerman).to.eql(false);\r",
											"}); \r",
											"console.log(response.data.lobby.tanks.heavyTank)\r",
											"\r",
											"pm.test('check response middleTank is empty', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank).to.eql([]);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank is empty', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank).to.eql([]);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "occupiedShooterDoubleTank",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"    //запрос на танк\r",
											"    pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&role=${pm.variables.get(\"middleTankGunner\")}&token=${pm.variables.get(\"token\")}&tankId=4567`,\r",
											"    \r",
											"    method:`GET`,\r",
											"    \r",
											"},function(err, res){\r",
											"    console.log(res.json())\r",
											"}\r",
											")\r",
											"    \r",
											"}\r",
											");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is not true', ()=>{ \r",
											"    pm.expect(response.data).to.not.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response general is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.general).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response bannerman is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.bannerman).to.eql(true);\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test('check response heavyTank is empty', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank).to.eql([]);\r",
											"}); \r",
											"\r",
											"pm.test('check response middleTank is empty', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank[0].id).to.eql(4567);\r",
											"}); \r",
											"\r",
											"pm.test('check response middleTank Mechanic is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank[0].Mechanic).to.eql(false);\r",
											"}); \r",
											"\r",
											"pm.test('check response middleTank Gunner is true', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank[0].Gunner).to.eql(true);\r",
											"}); \r",
											"console.log(response.data.lobby.tanks.middleTank[0].Mechanic)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "occupiedDriverDoubleTank",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"    //запрос на танк\r",
											"    pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&role=${pm.variables.get(\"middleTankMeh\")}&token=${pm.variables.get(\"token\")}&tankId=4567`,\r",
											"    \r",
											"    method:`GET`,\r",
											"    \r",
											"},function(err, res){\r",
											"    console.log(res.json())\r",
											"}\r",
											")\r",
											"    \r",
											"}\r",
											");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is not true', ()=>{ \r",
											"    pm.expect(response.data).to.not.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response general is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.general).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response bannerman is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.bannerman).to.eql(true);\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test('check response heavyTank is empty', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank).to.eql([]);\r",
											"}); \r",
											"\r",
											"pm.test('check response middleTank id is true', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank[0].id).to.eql(4567);\r",
											"}); \r",
											"\r",
											"pm.test('check response middleTank Mechanic is true', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank[0].Mechanic).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response middleTank Gunner is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank[0].Gunner).to.eql(false);\r",
											"}); \r",
											"console.log(response.data.lobby.tanks.middleTank[0].Mechanic)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "occupiedShooterTripleTank",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"    //запрос на танк\r",
											"    pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&role=${pm.variables.get(\"heavyTankGunner\")}&token=${pm.variables.get(\"token\")}&tankId=45678`,\r",
											"    \r",
											"    method:`GET`,\r",
											"    \r",
											"},function(err, res){\r",
											"    console.log(res.json())\r",
											"}\r",
											")\r",
											"    \r",
											"}\r",
											");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is not true', ()=>{ \r",
											"    pm.expect(response.data).to.not.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response general is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.general).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response bannerman is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.bannerman).to.eql(true);\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test('check response middleTank is empty', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank).to.eql([]);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank id is true', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].id).to.eql(45678);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank Mechanic is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].Mechanic).to.eql(false);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank Gunner is true', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].Gunner).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank Commander is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].Commander).to.eql(false);\r",
											"}); \r",
											"console.log(response.data.lobby.tanks.heavyTank[0].Mechanic)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "occupiedDriverTripleTank",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"    //запрос на танк\r",
											"    pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&role=${pm.variables.get(\"heavyTankMeh\")}&token=${pm.variables.get(\"token\")}&tankId=45678`,\r",
											"    \r",
											"    method:`GET`,\r",
											"    \r",
											"},function(err, res){\r",
											"    console.log(res.json())\r",
											"}\r",
											")\r",
											"    \r",
											"}\r",
											");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is not true', ()=>{ \r",
											"    pm.expect(response.data).to.not.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response general is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.general).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response bannerman is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.bannerman).to.eql(true);\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test('check response middleTank is empty', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank).to.eql([]);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank id is true', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].id).to.eql(45678);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank Mechanic is true', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].Mechanic).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank Gunner is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].Gunner).to.eql(false);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank Commander is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].Commander).to.eql(false);\r",
											"}); \r",
											"console.log(response.data.lobby.tanks.heavyTank[0].Mechanic)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "occupiedCommanderTripleTank",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"    //запрос на танк\r",
											"    pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&role=${pm.variables.get(\"heavyTankCommander\")}&token=${pm.variables.get(\"token\")}&tankId=45678`,\r",
											"    \r",
											"    method:`GET`,\r",
											"    \r",
											"},function(err, res){\r",
											"    console.log(res.json())\r",
											"}\r",
											")\r",
											"    \r",
											"}\r",
											");\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is not true', ()=>{ \r",
											"    pm.expect(response.data).to.not.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response general is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.general).to.eql(true);\r",
											"}); \r",
											"\r",
											"pm.test('check response bannerman is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.bannerman).to.eql(true);\r",
											"}); \r",
											"\r",
											"\r",
											"\r",
											"pm.test('check response middleTank is empty', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.middleTank).to.eql([]);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank id is true', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].id).to.eql(45678);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank Mechanic is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].Mechanic).to.eql(false);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank Gunner is false', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].Gunner).to.eql(false);\r",
											"}); \r",
											"\r",
											"pm.test('check response heavyTank Commander is true', ()=>{ \r",
											"    pm.expect(response.data.lobby.tanks.heavyTank[0].Commander).to.eql(true);\r",
											"}); \r",
											"console.log(response.data.lobby.tanks.heavyTank[0].Mechanic)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noToken(Error400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token=&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": ""
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noHash(Error400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby&token={{token}}&hash=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check tokenVerification status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get('Method Not Allowed'), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get('Method Not Allowed'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=getLobby1&token={{token}}&hash={{hash}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "getLobby1"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "hash",
											"value": "{{hash}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//1",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"    pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//2",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//3",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//4",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"",
									"}",
									");",
									"",
									"//5",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testpuppy1\")}&hash=${pm.variables.get(\"hashpuppy1\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"    pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//6",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant2\")}&hash=${pm.variables.get(\"hashsergeant2\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//7",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer2\")}&hash=${pm.variables.get(\"hashofficer2\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//8",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral2\")}&hash=${pm.variables.get(\"hashgeneral2\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"",
									"}",
									");",
									"",
									"//9",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testpuppy2\")}&hash=${pm.variables.get(\"hashpuppy2\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									" ",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "setGamerRole",
					"item": [
						{
							"name": "general",
							"item": [
								{
									"name": "infantryM16",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role=infantry",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "infantry"
												},
												{
													"key": "tankId",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "InfantryRPG",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role=infantryRPG",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "infantryRPG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bannerman",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); \r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role=bannerman",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "bannerman"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankGunner}}&tankId=5",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankDriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankMeh}}&tankId=5",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankGunner}}&tankId=6",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankdriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankMeh}}&tankId=6",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankCommander",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankCommander}}&tankId=6",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankCommander}}"
												},
												{
													"key": "tankId",
													"value": "6"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "general",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); \r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{general}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{general}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "soldier",
							"item": [
								{
									"name": "infantryM16",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{infantry}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{infantry}}"
												},
												{
													"key": "tankId",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "InfantryRPG",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{infantryRPG}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{infantryRPG}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bannerman",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); \r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{bannerman}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{bannerman}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankShooter(Error 234)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check updatePassword status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 234', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(234);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+'Insufficient level', ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Insufficient level'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankGunner}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankGunner}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankDriver(Error 234)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check updatePassword status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 234', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(234);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+'Insufficient level', ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Insufficient level'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankMeh}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankMeh}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankShooter(Error 234)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check updatePassword status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 234', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(234);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+'Insufficient level', ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Insufficient level'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankGunner}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankGunner}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankdriver(Error 234)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check updatePassword status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 234', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(234);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+'Insufficient level', ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Insufficient level'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankMeh}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankMeh}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankCommander(Error 234)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check updatePassword status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 234', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(234);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+'Insufficient level', ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Insufficient level'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankCommander}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankCommander}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "general(Error 235)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check updatePassword status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 234', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(234);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Insufficient level'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Insufficient level'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{general}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{general}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "sergeant",
							"item": [
								{
									"name": "infantryM16",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{infantry}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{infantry}}"
												},
												{
													"key": "tankId",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "InfantryRPG",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role=infantryRPG",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "infantryRPG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bannerman",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); \r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role=bannerman",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "bannerman"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankGunner}}&tankId=1",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankDriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankMeh}}&tankId=1",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankGunner}}&tankId=2",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankdriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankMeh}}&tankId=2",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankCommander(Error 234)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check updatePassword status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 234', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(234);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+'Insufficient level', ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Insufficient level'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankCommander}}&tankId=2",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankCommander}}"
												},
												{
													"key": "tankId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "general(Error 235)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check updatePassword status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 234', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(234);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Insufficient level'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Insufficient level'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{general}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{general}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "officer",
							"item": [
								{
									"name": "infantryM16",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role=infantry",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "infantry"
												},
												{
													"key": "tankId",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "InfantryRPG",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role=infantryRPG",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "infantryRPG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bannerman",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); \r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role=bannerman",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "bannerman"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankGunner}}&tankId=3",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankDriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankMeh}}&tankId=3",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankGunner}}&tankId=4",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankdriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankMeh}}&tankId=4",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankCommander",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('check login status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"const response = pm.response.json(); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"pm.test('check response result is ok', ()=>{ \r",
													"    pm.expect(response.result).to.eql('ok'); \r",
													"}); \r",
													" \r",
													"pm.test('check data is true', ()=>{ \r",
													"    pm.expect(response.data).to.eql(true); \r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankCommander}}&tankId=4",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankCommander}}"
												},
												{
													"key": "tankId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "general(Error 235)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check updatePassword status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 234', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(234);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Insufficient level'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Insufficient level'));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{general}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{general}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "error239",
							"item": [
								{
									"name": "doubleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 239', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(239);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Incorrect tank number'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Incorrect tank number'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankGunner}}&tankId=",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankGunner}}"
												},
												{
													"key": "tankId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankDriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 239', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(239);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Incorrect tank number'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Incorrect tank number'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankMeh}}&tankId=",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankMeh}}"
												},
												{
													"key": "tankId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 239', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(239);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Incorrect tank number'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Incorrect tank number'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankGunner}}&tankId=",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankGunner}}"
												},
												{
													"key": "tankId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankdriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 239', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(239);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Incorrect tank number'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Incorrect tank number'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankMeh}}&tankId=",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankMeh}}"
												},
												{
													"key": "tankId",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankCommander",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 239', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(239);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Incorrect tank number'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Incorrect tank number'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankCommander}}&tankId=",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankCommander}}"
												},
												{
													"key": "tankId",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "error240",
							"item": [
								{
									"name": "doubleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"     pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"middleTankGunner\")}&tankId=24345`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													"\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 240', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(240);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Tank number have another type'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Tank number have another type'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankGunner}}&tankId=24345",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "24345"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankDriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"      pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"middleTankGunner\")}&tankId=1313431`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 240', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(240);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Tank number have another type'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Tank number have another type'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankMeh}}&tankId=1313431",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "1313431"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"      pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"middleTankGunner\")}&tankId=45334354`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 240', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(240);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Tank number have another type'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Tank number have another type'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankGunner}}&tankId=45334354",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "45334354"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankdriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token);\r",
													"    pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"middleTankGunner\")}&tankId=453343541`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 240', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(240);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Tank number have another type'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Tank number have another type'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankMeh}}&tankId=453343541",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "453343541"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankCommander",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"\r",
													"      pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"middleTankGunner\")}&tankId=435413`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 240', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(240);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Tank number have another type'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Tank number have another type'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankCommander}}&tankId=435413",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankCommander}}"
												},
												{
													"key": "tankId",
													"value": "435413"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "error236",
							"item": [
								{
									"name": "bannerman",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"    \r",
													"}, function(err, res){\r",
													"    var  token  = res.json().data;\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"    pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"bannerman\")}`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 236', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(236);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('You taken this role'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('You taken this role'));\r",
													"});\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{bannerman}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{bannerman}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "general",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"    \r",
													"}, function(err, res){\r",
													"    var  token  = res.json().data;\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"    pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"general\")}`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 236', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(236);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('You taken this role'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('You taken this role'));\r",
													"});\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{general}}",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{general}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "error463",
							"item": [
								{
									"name": "infantryM16",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 463', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(463);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+'Role not implemented', ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Role not implemented'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{infantry}}%23$",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "tankId",
													"value": "",
													"disabled": true
												},
												{
													"key": "role",
													"value": "{{infantry}}%23$"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "InfantryRPG",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 463', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(463);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+'Role not implemented', ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Role not implemented'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{infantryRPG}}%23$",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{infantryRPG}}%23$"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Bannerman",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 463', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(463);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Role not implemented'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Role not implemented'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{bannerman}}%23$",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{bannerman}}%23$"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 463', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(463);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Role not implemented'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Role not implemented'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankGunner}}%23$",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankGunner}}%23$"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankDriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 463', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(463);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Role not implemented'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Role not implemented'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankMeh}}%23$",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankMeh}}%23$"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 463', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(463);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Role not implemented'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Role not implemented'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankGunner}}%23$",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankGunner}}%23$"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankdriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 463', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(463);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Role not implemented'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Role not implemented'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankMeh}}%23$",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankMeh}}%23$"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankCommander",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 463', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(463);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Role not implemented'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Role not implemented'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankCommander}}%23$",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankCommander}}%23$"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "general",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    console.log(res.json())\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"}\r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 463', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(463);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Role not implemented'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Role not implemented'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{general}}%23$",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{general}}%23$"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "error238",
							"item": [
								{
									"name": "doubleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"    \r",
													"}, function(err, res){\r",
													"    var  token  = res.json().data;\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"    pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"middleTankGunner\")}&tankId=13131`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 238', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(238);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Place already occupied'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Place already occupied'));\r",
													"});\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankGunner}}&tankId=13131",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "13131"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "doubleTankDriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"    \r",
													"}, function(err, res){\r",
													"    const  token  = res.json().data;\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"    pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"middleTankMeh\")}&tankId=13131`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 238', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(238);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Place already occupied'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Place already occupied'));\r",
													"});\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{middleTankMeh}}&tankId=13131",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{middleTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "13131"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankShooter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"    \r",
													"}, function(err, res){\r",
													"    var  token  = res.json().data;\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"    pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"heavyTankGunner\")}&tankId=456456`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 238', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(238);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Place already occupied'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Place already occupied'));\r",
													"});\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankGunner}}&tankId=456456",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankGunner}}"
												},
												{
													"key": "tankId",
													"value": "456456"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankDriver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"    \r",
													"}, function(err, res){\r",
													"    var  token  = res.json().data;\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"    pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"heavyTankMeh\")}&tankId=456456`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 238', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(238);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Place already occupied'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Place already occupied'));\r",
													"});\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankMeh}}&tankId=456456",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankMeh}}"
												},
												{
													"key": "tankId",
													"value": "456456"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "tripleTankCommander",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
													"    method:`GET`,\r",
													"    \r",
													"}, function(err, res){\r",
													"    var  token  = res.json().data;\r",
													"    pm.environment.set(\"token\", token.token)\r",
													"    pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"heavyTankCommander\")}&tankId=456456`,\r",
													"    method:`GET`\r",
													"});\r",
													"}\r",
													");\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();\r",
													"\r",
													"pm.test('check logout status', () =>{ \r",
													"    pm.expect(pm.response.code).to.eql(200); \r",
													"}); \r",
													" \r",
													"pm.test('check response is JSON', ()=> { \r",
													"    pm.expect(response).to.be.a('object') \r",
													"}); \r",
													" \r",
													"\r",
													"pm.test('check response result is error', ()=>{\r",
													"    pm.expect(response.result).to.eql('error');\r",
													"});\r",
													"\r",
													"pm.test('check code error is 238', ()=>{\r",
													"    pm.expect(response.error.code).to.eql(238);\r",
													"});\r",
													"\r",
													"pm.test('check code text is '+pm.variables.get('Place already occupied'), ()=>{\r",
													"    pm.expect(response.error.text).to.eql(pm.variables.get('Place already occupied'));\r",
													"});\r",
													"\r",
													"pm.sendRequest({\r",
													"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
													"    method:`GET`,\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{heavyTankCommander}}&tankId=456456",
											"protocol": "http",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												""
											],
											"query": [
												{
													"key": "method",
													"value": "setGamerRole"
												},
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "role",
													"value": "{{heavyTankCommander}}"
												},
												{
													"key": "tankId",
													"value": "456456"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "noToken(Error400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=setGamerRole&token=&role=bannerman",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "setGamerRole"
										},
										{
											"key": "token",
											"value": ""
										},
										{
											"key": "role",
											"value": "bannerman"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noRole(Error400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "setGamerRole"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "role",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check tokenVerification status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get('Method Not Allowed'), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get('Method Not Allowed'));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=&token={{token}}&role=bannerman",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "role",
											"value": "bannerman"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=setGamerRole1&token={{token}}&role=bannerman",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "setGamerRole1"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "role",
											"value": "bannerman"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "generalGoOut",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral2\")}&hash=${pm.variables.get(\"hashgeneral2\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok'); \r",
											"}); \r",
											" \r",
											"pm.test('check data is true', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true); \r",
											"}); \r",
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,\r",
											"    method:`GET`,\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?method=setGamerRole&token={{token}}&role={{general}}",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "method",
											"value": "setGamerRole"
										},
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "role",
											"value": "{{general}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"//1",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"    pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//2",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant1\")}&hash=${pm.variables.get(\"hashsergeant1\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//3",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer1\")}&hash=${pm.variables.get(\"hashofficer1\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//4",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral1\")}&hash=${pm.variables.get(\"hashgeneral1\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"",
									"}",
									");",
									"",
									"//5",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testpuppy1\")}&hash=${pm.variables.get(\"hashpuppy1\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"    pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//6",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testsergeant2\")}&hash=${pm.variables.get(\"hashsergeant2\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//7",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testofficer2\")}&hash=${pm.variables.get(\"hashofficer2\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"}",
									");",
									"",
									"//8",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testgeneral2\")}&hash=${pm.variables.get(\"hashgeneral2\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									"",
									"}",
									");",
									"",
									"//9",
									"pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"testpuppy2\")}&hash=${pm.variables.get(\"hashpuppy2\")}&rnd=${pm.variables.get(\"rnd\")}`,",
									"    method:`GET`,",
									"}, function(err, res){",
									"    const  token  = res.json().data;",
									"    console.log(res.json())",
									"    pm.environment.set(\"token\", token.token)",
									"     pm.sendRequest({",
									"    url: `http://${pm.variables.get(\"url\")}/api/?method=setGamerRole&token=${pm.variables.get(\"token\")}&role=${pm.variables.get(\"infantry\")}`,",
									"    method:`GET`,",
									"})",
									" ",
									"}",
									");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "move",
					"item": [
						{
							"name": "success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('check logout status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"const response = pm.response.json(); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"pm.test('check response result is ok', ()=>{ \r",
											"    pm.expect(response.result).to.eql('ok');\r",
											"}); \r",
											"\r",
											"pm.test('check response data is Data', ()=>{ \r",
											"    pm.expect(response.data).to.eql(true);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?token={{token}}&method=move&x=332&y=453",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "method",
											"value": "move"
										},
										{
											"key": "x",
											"value": "332"
										},
										{
											"key": "y",
											"value": "453"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "specSymbolX(Error422)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 422', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(422);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Invalid parameter values\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid parameter values\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?token={{token}}&method=move&x=332%23$%&y=453",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "method",
											"value": "move"
										},
										{
											"key": "x",
											"value": "332#$%"
										},
										{
											"key": "y",
											"value": "453"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "specSymbolY(Error422)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 422', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(422);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Invalid parameter values\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Invalid parameter values\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?token={{token}}&method=move&x=332&y=453%$%23",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "method",
											"value": "move"
										},
										{
											"key": "x",
											"value": "332"
										},
										{
											"key": "y",
											"value": "453%$#"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noToken(Error400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?token=&method=move&x=332&y=453",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "token",
											"value": ""
										},
										{
											"key": "method",
											"value": "move"
										},
										{
											"key": "x",
											"value": "332"
										},
										{
											"key": "y",
											"value": "453"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noX(Error400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?token={{token}}&method=move&x=&y=453",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "method",
											"value": "move"
										},
										{
											"key": "x",
											"value": ""
										},
										{
											"key": "y",
											"value": "453"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noY(Error400)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 400', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(400);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Bad Request\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Bad Request\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?token={{token}}&method=move&x=332&y=",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "method",
											"value": "move"
										},
										{
											"key": "x",
											"value": "332"
										},
										{
											"key": "y",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongToken(Error401)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 401', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(401);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Unauthorized\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Unauthorized\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?token={{token}}%23$%^&method=move&x=332&y=453",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}#$%^"
										},
										{
											"key": "method",
											"value": "move"
										},
										{
											"key": "x",
											"value": "332"
										},
										{
											"key": "y",
											"value": "453"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "noMethod(Error405)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check getMessages status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 405', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(405);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Method Not Allowed\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Method Not Allowed\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?token={{token}}&method=&x=332&y=453",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "method",
											"value": ""
										},
										{
											"key": "x",
											"value": "332"
										},
										{
											"key": "y",
											"value": "453"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongMethod(Error501)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: `http://${pm.variables.get(\"url\")}/api/?method=login&login=${pm.variables.get(\"login\")}&hash=${pm.variables.get(\"hash\")}&rnd=${pm.variables.get(\"rnd\")}`,\r",
											"    method:`GET`,\r",
											"}, function(err, res){\r",
											"    const  token  = res.json().data;\r",
											"    console.log(res.json())\r",
											"    pm.environment.set(\"token\", token.token)\r",
											"}\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.test('check login status', () =>{ \r",
											"    pm.expect(pm.response.code).to.eql(200); \r",
											"}); \r",
											" \r",
											"pm.test('check response is JSON', ()=> { \r",
											"    pm.expect(response).to.be.a('object') \r",
											"}); \r",
											" \r",
											"\r",
											"pm.test('check response result is error', ()=>{\r",
											"    pm.expect(response.result).to.eql('error');\r",
											"});\r",
											"\r",
											"pm.test('check code error is 501', ()=>{\r",
											"    pm.expect(response.error.code).to.eql(501);\r",
											"});\r",
											"\r",
											"pm.test('check code text is '+pm.variables.get(\"Not Implemented\"), ()=>{\r",
											"    pm.expect(response.error.text).to.eql(pm.variables.get(\"Not Implemented\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{url}}/api/?token={{token}}&method=move%&x=332&y=453",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}"
										},
										{
											"key": "method",
											"value": "move%"
										},
										{
											"key": "x",
											"value": "332"
										},
										{
											"key": "y",
											"value": "453"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "login",
			"value": "",
			"type": "string"
		},
		{
			"key": "url",
			"value": "",
			"type": "string"
		},
		{
			"key": "rnd",
			"value": "",
			"type": "string"
		},
		{
			"key": "hash",
			"value": "",
			"type": "string"
		},
		{
			"key": "nickname",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "message",
			"value": "",
			"type": "string"
		},
		{
			"key": "Bad Request",
			"value": "",
			"type": "string"
		},
		{
			"key": "Unauthorized",
			"value": "",
			"type": "string"
		},
		{
			"key": "Forbidden",
			"value": "",
			"type": "string"
		},
		{
			"key": "Method Not Allowed",
			"value": "",
			"type": "string"
		},
		{
			"key": "Invalid login(nickname)",
			"value": "",
			"type": "string"
		},
		{
			"key": "Not Implemented",
			"value": "",
			"type": "string"
		},
		{
			"key": "Login Occupied",
			"value": "",
			"type": "string"
		},
		{
			"key": "Invalid Message",
			"value": "",
			"type": "string"
		},
		{
			"key": "User not Exist",
			"value": "",
			"type": "string"
		},
		{
			"key": "Insufficient level",
			"value": "",
			"type": "string"
		},
		{
			"key": "Level less current gamer",
			"value": "",
			"type": "string"
		},
		{
			"key": "You taken this role",
			"value": "",
			"type": "string"
		},
		{
			"key": "Role taken",
			"value": "",
			"type": "string"
		},
		{
			"key": "Place already occupied",
			"value": "",
			"type": "string"
		},
		{
			"key": "Incorrect tank number",
			"value": "",
			"type": "string"
		},
		{
			"key": "Tank number have another type",
			"value": "",
			"type": "string"
		},
		{
			"key": "Role not implemented",
			"value": "",
			"type": "string"
		},
		{
			"key": "hash1",
			"value": "",
			"type": "string"
		},
		{
			"key": "loginReg",
			"value": "",
			"type": "string"
		},
		{
			"key": "nickReg",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashReg",
			"value": "",
			"type": "string"
		},
		{
			"key": "testpuppy1",
			"value": "",
			"type": "string"
		},
		{
			"key": "testpuppy2",
			"value": "",
			"type": "string"
		},
		{
			"key": "testsergeant1",
			"value": "",
			"type": "string"
		},
		{
			"key": "testsergeant2",
			"value": "",
			"type": "string"
		},
		{
			"key": "testofficer1",
			"value": "",
			"type": "string"
		},
		{
			"key": "testofficer2",
			"value": "",
			"type": "string"
		},
		{
			"key": "testgeneral1",
			"value": "",
			"type": "string"
		},
		{
			"key": "testgeneral2",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashpuppy1",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashpuppy2",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashsergeant1",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashsergeant2",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashofficer1",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashofficer2",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashgeneral1",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashgeneral2",
			"value": "",
			"type": "string"
		},
		{
			"key": "infantry",
			"value": "",
			"type": "string"
		},
		{
			"key": "infantryRPG",
			"value": "",
			"type": "string"
		},
		{
			"key": "middleTankGunner",
			"value": "",
			"type": "string"
		},
		{
			"key": "middleTankMeh",
			"value": "",
			"type": "string"
		},
		{
			"key": "heavyTankCommander",
			"value": "",
			"type": "string"
		},
		{
			"key": "heavyTankMeh",
			"value": "",
			"type": "string"
		},
		{
			"key": "heavyTankGunner",
			"value": "",
			"type": "string"
		},
		{
			"key": "bannerman",
			"value": "",
			"type": "string"
		},
		{
			"key": "general",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashLobby",
			"value": "",
			"type": "string"
		},
		{
			"key": "token1",
			"value": "",
			"type": "string"
		},
		{
			"key": "chatHash",
			"value": "",
			"type": "string"
		},
		{
			"key": "Invalid parameter values",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashMap",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashGamers",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashMobs",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashBullets",
			"value": "",
			"type": "string"
		},
		{
			"key": "hashBodies",
			"value": "",
			"type": "string"
		}
	]
}